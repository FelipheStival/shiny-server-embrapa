{
    "contents" : "start.packages = function(){\n     require(leaflet)\n     require(RODBC)\n     require(seas)\n}\n\ncreate.map = function(bancoDados, usuario, inp){\n     \n     coordenadas = get.estacao.meta(bancoDados, usuario, inp)\n     \n     plantIcon = makeIcon(\n          iconUrl = \"src//pictures//leaves.svg\",\n          iconWidth = 38, iconHeight = 95,\n          iconAnchorX = 22, iconAnchorY = 20\n     )\n     \n     leaflet(coordenadas) %>%\n          addTiles() %>%\n          addProviderTiles(\"OpenTopoMap\", group = \"Topografia\") %>%\n          addProviderTiles(\"Esri.WorldImagery\", group = \"Satelite\") %>%\n          addMarkers(lng=~longitude, lat=~latitude, popup=~id_estacao, clusterOptions = markerClusterOptions(), icon = plantIcon) %>%\n          addLayersControl(\n               baseGroups = c(\"Topografia\", \"Satelite\"),\n               options = layersControlOptions(collapsed = FALSE)\n          )\n}\n\nget.estados = function(bancoDados, usuario){\n     \n     # Criando uma conexao com o banco\n     conexao = odbcConnect(bancoDados,usuario)\n     estados = sqlQuery(conexao, \"select * from estado\")\n     estados = estados[complete.cases(estados),]\n     \n     estados.estacao = sqlQuery(conexao, \"select distinct codigoEstado from estacao\")\n     estados = estados[estados$codigoEstado %in% estados.estacao$codigoEstado,]\n     odbcClose(conexao)\n     \n     return(estados)\n}\n\nget.estacao.meta = function(bancoDados, usuario, codigo){\n     \n     # Criando uma conexao com o banco\n     query = \"select distinct latitude, longitude, id_estacao, codigoEstado from estacao\"\n     \n     if(codigo != \"Todos\"){\n          codigo = strsplit(codigo, split = ' ')[[1]][1]\n          query = sprintf(\"%s where codigoEstado = '%s'\", query, codigo)\n     }\n     \n     conexao = odbcConnect(bancoDados,usuario)\n     coordenadas = sqlQuery(conexao, query)\n     coordenadas = coordenadas[complete.cases(coordenadas),]\n     odbcClose(conexao)\n     \n     return(coordenadas)\n}\n\nget.estacao.By.latlong = function(bancoDados, usuario, lat, long){\n     \n     # Criando uma conexao com o banco\n     query = sprintf(\"select distinct id_estacao from estacao where latitude = '%s' and longitude = '%s'\",lat,long)\n     \n     conexao = odbcConnect(bancoDados,usuario)\n     coordenadas = sqlQuery(conexao, query)\n     coordenadas = coordenadas[complete.cases(coordenadas),]\n     odbcClose(conexao)\n     \n     return(as.character(coordenadas))\n}\n\nget.estacao = function(bancoDados, usuario, estacao, intervalo){\n     \n     # Criando uma conexao com o banco\n     query = \"select id_estacao, data, tempMaxima, tempMinima, precipitacao, radiacao, tempMaximaFlag, tempMinimaFlag, precipitacaoFlag, radiacaoFlag from estacao\"\n     query = sprintf(\"%s where id_estacao = '%s' and data >= '%s' and data <= '%s'\", query, estacao, as.character(intervalo[1]), as.character(intervalo[2]) )\n     \n     conexao = odbcConnect(bancoDados,usuario)\n     coordenadas = sqlQuery(conexao, query)\n     coordenadas = coordenadas[complete.cases(coordenadas),]\n     odbcClose(conexao)\n     \n     return(coordenadas)\n}\n\nget.altitude = function(bancoDados, usuario, idEstacao){\n     \n     # Criando uma conexao com o banco\n     query = sprintf(\"select distinct codigoMunicipio from estacao where id_estacao = '%s'\", idEstacao)\n     \n     conexao = odbcConnect(bancoDados,usuario)\n     codigoMunicipio = sqlQuery(conexao, query)\n     codigoMunicipio = codigoMunicipio[complete.cases(codigoMunicipio),]\n     \n     query = sprintf(\"select altitude from municipio where codigoMunicipio = '%s'\", codigoMunicipio)\n\n     altitude = sqlQuery(conexao, query)\n     altitude = altitude[complete.cases(altitude),]\n     odbcClose(conexao)\n     \n     return(altitude)\n}\n\nget.variaveis = function(){\n     \n     nomes.variavel = c(\"Temperatura Maxima\", \"Temperatura Minima\", \"Precipitacao\", \"Radiacao\", \"Graus Dias Acumulado\")\n     nomes.variavel = sort(nomes.variavel)\n     \n     return(nomes.variavel)\n}\n\nget.variaveis.reverse = function(name){\n     \n     nomes.variavel = switch(name,\n                             \"t_max\" = \"Temperatura Maxima\",\n                             \"t_min\" = \"Temperatura Minima\",\n                             \"precipitacao\" = \"Precipitacao\",\n                             \"radiacao\" = \"Radiacao\", \n                             \"gdd10\" = \"Graus Dias Acumulado\")\n     \n     return(nomes.variavel)\n}\n\nprepare.table = function(tabela, taxa){\n     \n     tabela$tempMedia = (tabela$tempMaxima + tabela$tempMinima)/2\n     tabela = tabela[,c(1,2,3,4,11,5,6)]\n     names(tabela) = c(\"id_estacao\",\"date\", \"t_max\", \"t_min\" ,\"t_mean\", \"precipitacao\", \"radiacao\")\n     \n     tabela$date = as.Date(tabela$date)\n     tabela$gdd10 = tabela$t_mean - taxa\n     tabela$gdd10[tabela$gdd10 < 0] = 0\n     attr(tabela$gdd10,\"long.name\") <- \"Graus Dias Acumulado\"\n     \n     return(tabela)\n}\n\ngetDssatFiles = function(data, bancoDados, usuario, estado){\n     \n     estacao.meta = get.estacao.meta(bancoDados, usuario, estado) \n     \n     data$tempMaximaFlag = NULL\n     data$tempMinimaFlag = NULL\n     data$precipitacaoFlag = NULL\n     data$radiacaoFlag = NULL\n     \n     anos = as.Date(data$data)\n     anos = unique(year(anos))\n     anos = as.character(anos)\n     \n     estacao = unique(data$id_estacao)\n     estacao = as.character(estacao)\n     \n     altitude = get.altitude(bancoDados, usuario, estacao)\n     \n     arq.tmp = list.files(path = \"tmp\", full.names = T)\n     \n     lat = estacao.meta$latitude[estacao.meta$id_estacao == estacao]\n     long = estacao.meta$longitude[estacao.meta$id_estacao == estacao]\n     \n     parametros = list()\n     parametros$estacao = estacao\n     parametros$bancoDados = bancoDados\n     parametros$usuario = usuario\n     parametros$lat = lat\n     parametros$long = long\n     parametros$altitude = altitude\n\n     unlink(\"files\")\n     dir.create(\"files\")\n     \n     arquivos = sapply(anos, function(ano,tabela,parametros){\n\n          estacao = parametros$estacao\n          bancoDados = parametros$bancoDados\n          usuario = parametros$usuario\n          lat = parametros$lat\n          long = parametros$long\n          altitude = parametros$altitude\n          \n          name.tmp = gsub(\"\\\\.\",\"\",estacao)\n          name.tmp = substr(name.tmp,1,4)\n          fileName.tmp = sprintf(\"%s%s01\", name.tmp , substr(ano ,3 ,4))\n          fileName.tmp = sprintf(\"files//%s.WTH\", fileName.tmp)\n          \n          cat(sprintf(\"*WEATHER DATA %s\\n\\n\", estacao), file = fileName.tmp, append = T)\n          \n          #=======================================#\n          \n          tav = 10\n          amp = 12\n          \n          estacao = gsub(\"\\\\.\",\"\",estacao)\n          \n          cat(sprintf(\"@ INSI %8s %8s %5s %5s %5s REFHT WNDHT\\n\",\"LAT\",\"LONG\",\"ELEV\",\"TAV\",\"AMP\"), file = fileName.tmp, append = T)\n          cat(sprintf(\" %4s %8s %8s %5s %5s %5s -99.0 -99.0\\n\",substr(estacao,1,4) ,lat, long, altitude, tav, amp), file = fileName.tmp, append = T)\n          \n          #=======================================#\n          \n          tabela = tabela[year(tabela$data) == ano,]\n          data.convert = tabela$data\n          data.convert = format(data.convert, \"%j\")\n          data.convert = sprintf(\"%s%s\", substr(ano,3,4),data.convert)\n          \n          cat(sprintf(\"@DATE  SRAD  TMAX  TMIN  RAIN  DEWP  WIND   PAR  EVAP  RHUM\\n\"), file = fileName.tmp, append = T)\n          cat(sprintf(\"%s %5s %5s %5s %5s\\n\", data.convert, tabela$radiacao, tabela$tempMaxima, tabela$tempMinima, tabela$precipitacao), file = fileName.tmp, append = T, sep = \"\")\n          \n          return(fileName.tmp)\n          \n     },data,parametros)\n} \n",
    "created" : 1484562149869.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1627289461",
    "id" : "CF2D6FC8",
    "lastKnownWriteTime" : 1484580842,
    "path" : "C:/Users/pedro.farias/Desktop/EmbrapaScripts/ProjetosShiny/Apresentacao/src/basicfunctions.R",
    "project_path" : "src/basicfunctions.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}