a= image(dat3.ss, "gdd10", palette=colorRampPalette(c("white", "red"))(64))
attr(tabela$gdd10,"long.name") <- "growing degree days"
dat3.ss <- seas.sum(tabela, var="gdd10")
image(dat3.ss, "gdd10", palette=colorRampPalette(c("white", "blue"))(64))
tabela$snow = 0
tabela$precip = tabela$snow + tabela$rain
tabela$date = as.Date(tabela$date)
tabela$gdd10 = tabela$t_mean - 10
tabela$gdd10[tabela$gdd10 < 0] = 0
s.s = seas.sum(tabela, width = "mon")
s.n = precip.norm(s.s, fun = "mean")
plot(s.n)
attr(tabela$gdd10,"long.name") <- "growing degree days"
dat3.ss <- seas.sum(tabela, var="gdd10")
image(dat3.ss, "gdd10", palette=colorRampPalette(c("white", "blue"))(64))
plot(s.n)
image(dat3.ss, "gdd10", palette=colorRampPalette(c("white", "azure"))(64))
image(dat3.ss, "gdd10", palette=colorRampPalette(c("azure", "blue"))(64))
image(dat3.ss, "gdd10", palette=colorRampPalette(c("white", "blue"))(64))
shiny::runApp()
shiny::runApp()
shiny::runApp()
s.s = seas.sum(tabela, var = variavel)
variavel
variavel
s.s = seas.sum(tabela, var = variavel)
paleta = colorRampPalette(c("white", "blue"))(64)
image(dat3.ss, variavel, palette = paleta)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tabela = prepare.table(tabela,10)
variavel = "precipitacao"
s.s = seas.sum(tabela, width = intervalo)
tabela
View(tabela)
s.s = seas.sum(tabela, width = intervalo)
tabela$gdd10 = NULL
s.s = seas.sum(tabela, width = intervalo)
View(tabela)
names(tabela)
shiny::runApp()
tabela = prepare.table(tabela,10)
names(tabela)[6]
names(tabela)[6]
names(tabela)[6] = "rain"
tabela$gdd10 = NULL
tabela$snow = 0
tabela$precip = tabela$snow + tabela$rain
s.s = seas.sum(tabela, width = intervalo)
s.n = precip.norm(s.s, fun = "mean")
plot(s.n)
s.n
plot(s.n)
names(tabela)
plot(s.n)
shiny::runApp()
shiny::runApp()
a = plot(x = 1:10, y = 2:11)
a
plot(a)
View(tabela)
View(tabela)
d.w.table = interarrival(tabela, "precip")
d.w.table
plot(d.w.table)
plot(d.w.table, width = intervalo, start=1, rep=6)
intervalo = "mon"
plot(d.w.table, width = intervalo, start=1, rep=6)
plot(s.n, start=1, rep=6)
par(mfrow=c(1,2))
plot(s.n, start=1, rep=6)
plot(d.w.table, width = intervalo, start=1, rep=6)
par(mfrow=c(1,2))
plot(s.n, start=1, rep=6)
plot(d.w.table, width = intervalo, start=1, rep=6)
par(mfrow=c(1,2))
plot(d.w.table, width = intervalo, start=1, rep=6)
plot(s.n, start=1, rep=6)
par(mfrow=c(2,1))
plot(s.n, start=1, rep=6)
plot(d.w.table, width = intervalo, start=1, rep=6)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
s.s = seas.sum(tabela, width = intervalo)
s.n = precip.norm(s.s, fun = "mean")
plot(s.n, start=1, rep=6)
image(s.n)
dat.dep <- precip.dep(tabela, s.n)
plot(dat.dep)
View(dat.dep)
plot(precip ~ date, dat.dep, type="l",
main="CPD from mean normals")
plot(precip ~ date, dat.dep,
main="CPD from mean normals")
plot(s.n, start=1, rep=6)
par(mfrow=c(2,1))
plot(s.n, start=1, rep=6)
plot(precip ~ date, dat.dep, type="l",
main = "Media de precipitacao anual" )
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dat <- mksub(mscdata, id=1108447)
dat.ss <- seas.sum(dat)
dat.nm <- precip.norm(dat.ss, fun="mean")
data(mscdata)
dat <- mksub(mscdata, id=1108447)
dat.ss <- seas.sum(dat)
dat.nm <- precip.norm(dat.ss, fun="mean")
# plot precipitation normal
plot(dat.nm) # this is the same as plot.precip.norm(dat.nm)
# use precipitation normal
dat.dep <- precip.dep(dat, dat.nm)
plot(dep ~ date, dat.dep, type="l",
main="CPD from mean normals")
precip.dep
View(dat.dep)
View(dat)
shiny::runApp()
data(mscdata)
dat <- mksub(mscdata, id=1108447)
dat.ss <- seas.sum(dat)
dat.nm <- precip.norm(dat.ss, fun="mean")
# plot precipitation normal
plot(dat.nm) # this is the same as plot.precip.norm(dat.nm)
# use precipitation normal
dat.dep <- precip.dep(dat, dat.nm)
plot(dep ~ date, dat.dep, type="l",
main="CPD from mean normals")
plot(dat.nm) # this is the same as plot.precip.norm(dat.nm)
abline(h = 4, col= "red")
plot(dat.nm) # this is the same as plot.precip.norm(dat.nm)
abline(h = 4, col= "red")
shiny::runApp()
image(s.s, variavel, palette = paleta, start=1, rep=6)
s.s = seas.sum(tabela, var = variavel, width = intervalo)
intervalo
variavel
paleta = colorRampPalette(c("white", cor))(64)
image(s.s, variavel, palette = paleta, start=1, rep=6)
shiny::runApp()
tabela = prepare.table(tabela,10)
color = ifelse(variavel == "precipitacao", "azure", "tomato")
seas.var.plot(tabela, var = variavel ,start=1, rep=6, col=color,ylog = TRUE, width = intervalo)
tabela = read.csv(file.choose())
tabela = prepare.table(tabela,10)
color = ifelse(variavel == "precipitacao", "azure", "tomato")
seas.var.plot(tabela, var = variavel ,start=1, rep=6, col=color,ylog = TRUE, width = intervalo)
abline(h = 1)
seas.var.plot(tabela, var = variavel ,start=1, rep=6, col=color,ylog = TRUE, width = intervalo)
color = ifelse(variavel == "precipitacao", "azure", "tomato")
seas.var.plot(tabela, var = variavel ,start=1, rep=6, col=color,ylog = TRUE, width = intervalo)
title(main = "Teste", xlab = "aa")
year(max(tabela$date))
year.max = year(max(tabela$date))
year.min = year(min(tabela$date))
id = unique(tabela$id_estacao)
titulo = sprintf("Estacao '%s'\n %s - %s", id, year.min, year.max)
color = ifelse(variavel == "precipitacao", "azure", "tomato")
seas.var.plot(tabela, var = variavel, start=1, rep=6, col=color,
ylog = TRUE, width = intervalo, main = titulo)
title(xlab = NULL)
seas.var.plot(tabela, var = variavel, start=1, rep=6, col=color,
ylog = TRUE, width = intervalo, main = titulo)
title(xlab = NULL)
title(xlab = "")
color = ifelse(variavel == "precipitacao", "azure", "tomato")
seas.var.plot(tabela, var = variavel, start=1, rep=6, col=color,
ylog = TRUE, width = intervalo, main = titulo)
color = ifelse(variavel == "precipitacao", "azure", "tomato")
seas.var.plot(tabela, var = variavel, start=1, rep=6, col=color,
ylog = TRUE, width = intervalo, main = titulo)
seas.var.plot(tabela, var = variavel, start=1, rep=6, col=color,
ylog = TRUE, width = intervalo, main = titulo)
title(xlab = "a")
get.variaveis.reverse = function(name){
nomes.variavel = switch(name,
"t_max" = "Temperatura Maxima",
"t_min" = "Temperatura Minima",
"precipitacao" = "Precipitacao",
"radiacao" = "Radiacao",
"gdd10" = "Graus Dias Acumulado")
return(nomes.variavel)
}
get.variaveis.reverse(variavel)
color = ifelse(variavel == "precipitacao", "azure", "tomato")
seas.var.plot(tabela, var = variavel, start=1, rep=6, col=color,
ylog = TRUE, width = intervalo, main = titulo, ylab = get.variaveis.reverse(variavel))
plot(s.n, start=1, rep=6)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
name
name
name
shiny::runApp()
shiny::runApp()
variavel
var = get.variaveis.reverse(variavel)
shiny::runApp()
shiny::runApp()
shiny::runApp()
view(Data)
View(data)
data$tempMaximaFlag = NULL
data$tempMinimaFlag = NULL
data$precipitacaoFlag = NULL
data$radiacaoFlag = NULL
anos = as.Date(data$anos)
data$tempMaximaFlag = NULL
data$tempMinimaFlag = NULL
data$precipitacaoFlag = NULL
data$radiacaoFlag = NULL
data$anos
View(data)
anos = as.Date(data$data)
anos = unique(year(anos))
anos = ano[1]
ano = anos[1]
arquivo.tmp = tempfile()
tabela = data
estacao = unique(data$estacao)
View(data)
estacao = unique(data$id_estacao)
estacao = as.character(estacao)
name.tmp = gsub("\\.","",estacao)
substr(name.tmp,1,4)
anos = as.character(anos)
ano = anos[1]
name.tmp = sprintf("%s%s01", substr(name.tmp,1,4) , substr(ano ,3 ,4))
arquivo.tmp = tempfile(pattern = name.tmp, fileext = "WTH")
arquivo.tmp
arquivo.tmp = tempfile()
arquivo.tmp
strsplit(arquivo.tmp, "\\")
strsplit(arquivo.tmp, "\\\\")
paste0(tmp.dir, collapse = "\\")
tmp.dir = strsplit(arquivo.tmp, "\\\\")[[1]]
sprintf("%s//%s", paste0(tmp.dir, collapse = "\\"), name.tmp)
name.tmp = sprintf("%s\\%s", paste0(tmp.dir, collapse = "\\"), name.tmp)
file.rename(arquivo.tmp, name.tmp)
arquivo.tmp
name.tmp
tmp.dir = tmp.dir[1:(length(tmp.dir) - 1)]
name.tmp = sprintf("%s\\%s", paste0(tmp.dir, collapse = "\\"), name.tmp)
name.tmp
file.rename(arquivo.tmp, name.tmp)
arquivo.tmp
tmp.dir
tmp.dir = strsplit(arquivo.tmp, "\\\\")[[1]]
tmp.dir
tmp.dir = tmp.dir[1:(length(tmp.dir) - 1)]
tmp.dir
name.tmp = gsub("\\.","",estacao)
name.tmp = sprintf("%s%s01", substr(name.tmp,1,4) , substr(ano ,3 ,4))
arquivo.tmp = tempfile()
tmp.dir = strsplit(arquivo.tmp, "\\\\")[[1]]
tmp.dir = tmp.dir[1:(length(tmp.dir) - 1)]
name.tmp = sprintf("%s\\%s", paste0(tmp.dir, collapse = "\\"), name.tmp)
name.tmp
arquivo.tmp
file.rename(arquivo.tmp, name.tmp)
name.tmp = gsub("\\.","",estacao)
name.tmp = sprintf("%s%s01", substr(name.tmp,1,4) , substr(ano ,3 ,4))
name.tmp
arquivo.tmp = sprintf("tmp//%s.WTH", name.tmp)
arquivo.tmp
sprintf("*WEATHER DATA %s", estacao)
xx <- sprintf("%1$d %1$x %1$X", 0:15)
xx
data.convert = tabela$data
format(data.convert, "%j")
tabela = tabela[tabela$id_estacao == estacao,]
estacao
tabela = tabela[year(tabela$ano) == ano,]
tabela = tabela[year(tabela$data) == ano,]
data.convert = tabela$data
format(data.convert, "%j")
shiny::runApp()
data.convert
arq.tmp = list.files(path = "tmp", full.names = T)
unlink(arq.tmp)
sprintf("%.3f", pi)
shiny::runApp()
cat(sprintf("*WEATHER DATA %s\n\n", estacao), file = fileName.tmp, append = T)
tabela = tabela[year(tabela$data) == ano,]
data.convert = tabela$data
data.convert = format(data.convert, "%j")
sprintf("@DATE  SRAD  TMAX  TMIN  RAIN  DEWP  WIND   PAR  EVAP  RHUM\n")
cat(sprintf("@DATE  SRAD  TMAX  TMIN  RAIN  DEWP  WIND   PAR  EVAP  RHUM\n"), file = fileName.tmp, append = T)
cat(sprintf("%S  +%.2f  +%.2f\n", data.convert, tabela$radiacao, tabela$tempMaxima, tabela$tempMinima, tabela$precipitacao), file = fileName.tmp, append = T)
shiny::runApp()
shiny::runApp()
sprintf("%-9s", "aaa aaa")
sprintf("%-9s", "aaaaaa")
sprintf("%-9s", "16")
sprintf("%-2s", "16")
sprintf("%2s", "16")
sprintf("%+6s", "16")
shiny::runApp()
shiny::runApp()
sprintf("%s\\+%6s","aa", "aa")
sprintf("%s\\%6s","aa", "aa")
sprintf("%s%6s","aa", "aa")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
meta.data = get.estacao.meta("agritempo", "pedro.farias", codigoEstado)
View(meta.data)
query = sprintf("select codigoMunicipio from estacao where id_estacao = '%s'", idEstacao)
bancoDados = "agritempo"
usuario = "pedro.farias"
idEstacao = ".CEMIG.00025"
query = sprintf("select codigoMunicipio from estacao where id_estacao = '%s'", idEstacao)
conexao = odbcConnect(bancoDados,usuario)
coordenadas = sqlQuery(conexao, query)
View(coordenadas)
query = sprintf("select distinct codigoMunicipio from estacao where id_estacao = '%s'", idEstacao)
conexao = odbcConnect(bancoDados,usuario)
coordenadas = sqlQuery(conexao, query)
coordenadas = coordenadas[complete.cases(coordenadas),]
coordenadas
query = sprintf("select altitude from municipio where codigoMunicipio = '%s'", codigoMunicipio)
codigoMunicipio = sqlQuery(conexao, query)
codigoMunicipio = coordenadas[complete.cases(coordenadas),]
codigoMunicipio = codigoMunicipio[complete.cases(codigoMunicipio),]
query = sprintf("select altitude from municipio where codigoMunicipio = '%s'", codigoMunicipio)
coordenadas = sqlQuery(conexao, query)
parametros = list()
shiny::runApp()
shiny::runApp()
shiny::runApp()
estacao.meta
lat = estacao.meta$latitude[estacao.meta$id_estacao == estacao]
long = estacao.meta$longitude[estacao.meta$id_estacao == estacao]
shiny::runApp()
shiny::runApp()
zip(zipfile = "tese.zip", "tmp")
zip(zipfile = "teste.zip", files = "tmp")
zip(zipfile = "teste.zip", files = "tmp/CEMI0001.WTH")
tar(tarfile = "teste.tar", files = "tmp/CEMI0001.WTH")
shiny::runApp()
shiny::runApp()
shiny::runApp()
file
tmp.files
unlink(tmp.files)
tmp.files
getwd()
Q
shiny::runApp()
unlink(tmp.files)
names(tmp.files)
names(tmp.files) = NULL
tmp.files
file = "teste.tar"
tar(tarfile = file, files = tmp.files)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(RMySQL)
shiny::runApp()
conn = dbConnect(
MySQL(),
user = DB_USERNAME,
password = DB_PASSWORD,
dbname = DB_DATABASE,
host = DB_HOST,
port = DB_PORT
)
estados = dbSendQuery(conn,query)
query = "select * from estado"
estados = dbSendQuery(conn,query)
estados = fetch(estados,n = -1)
estados
estados = estados[complete.cases(estados),]
estados
query = "select distinct codigoEstado from estacao"
estados.estacao = dbSendQuery(conn,query)
estados.estacao = dbFetch(estados.estacao,n = -1)
estados = estados[estados$codigoEstado %in% estados.estacao$codigoEstado,]
# Fechando conexao
dbDisconnect(conn)
# Metodo para obter a conexao com o banco de dados
getConnection(){
conn = dbConnect(
MySQL(),
user = DB_USERNAME,
password = DB_PASSWORD,
dbname = DB_DATABASE,
host = DB_HOST,
port = DB_PORT
)
return(conn)
}
# Metodo para executar Query no banco
executeQuery(query){
# Obtendo conexaos
conn = getConnection()
# Obtendo dados
result = dbSendQuery(conn,query)
result = fetch(result, n = -1)
# Disconectando banco
dbDisconnect(conn)
return(result)
}
# Metodo para obter a conexao com o banco de dados
getConnection = function(){
conn = dbConnect(
MySQL(),
user = DB_USERNAME,
password = DB_PASSWORD,
dbname = DB_DATABASE,
host = DB_HOST,
port = DB_PORT
)
return(conn)
}
# Metodo para executar Query no banco
executeQuery = function(query){
# Obtendo conexaos
conn = getConnection()
# Obtendo dados
result = dbSendQuery(conn,query)
result = fetch(result, n = -1)
# Disconectando banco
dbDisconnect(conn)
return(result)
}
runApp()
estados = executeQuery("select * from estado")
View(estados)
estados.estacao = executeQuery("select distinct codigoEstado from estacao")
estados = estados[estados$codigoEstado %in% estados.estacao$codigoEstado,]
runApp()
coordenadas = executeQuery(query)
View(coordenadas)
coordenadas = coordenadas[complete.cases(coordenadas),]
runApp()
runApp()
# Criando uma conexao com o banco
estados = executeQuery("select * from estado")
estados = estados[complete.cases(estados),]
estados.estacao = executeQuery("select distinct codigoEstado from estacao")
estados = estados[estados$codigoEstado %in% estados.estacao$codigoEstado,]
runApp()
# Criando uma conexao com o banco
query = "select distinct latitude, longitude, id_estacao, codigoEstado from estacao"
codigo != "Todos"
coordenadas = executeQuery(query)
coordenadas = coordenadas[complete.cases(coordenadas),]
View(coordenadas)
runApp()
query = sprintf("select distinct id_estacao from estacao where latitude = '%s' and longitude = '%s'",lat,long)
coordenadas = executeQuery(query)
coordenadas = coordenadas[complete.cases(coordenadas),]
query = sprintf("select distinct id_estacao from estacao where latitude = '%s' and longitude = '%s'",lat,long)
runApp()
getwd()
list.files()
