#==================================================================
# Metodo para obter dados para o sumario
#
# @estado string com estado selecionado
# @return data.frame com dados filtrados
#==================================================================
analise.provider.sumario = function(estado) {
    statement = sprintf(
    "SELECT inmet_daily_data.id,
	   station.id as id_estacao,
	   station.code,
	   city.latitude,
	   city.longitude,
	   state.name as estado,
	   city.name as cidade,
	   inmet_daily_data.measurement_date,
	   inmet_daily_data.minimum_temperature,
	   inmet_daily_data.maximum_temperature,
	   inmet_daily_data.minimum_relative_air_humidity,
	   inmet_daily_data.maximum_relative_air_humidity,
	   inmet_daily_data.wind_speed,
	   inmet_daily_data.global_radiation,
	   inmet_daily_data.rain
	FROM inmet_daily_data
	JOIN station ON inmet_daily_data.station_id = station.id
  JOIN city ON station.city_id = city.id
	JOIN state ON city.state_id = state.id
	WHERE state.name = '%s'
	ORDER BY id_estacao,inmet_daily_data.measurement_date",
    estado
    )
    
  dados = banco.provider.executeQuery(statement)
  
  # Contando linhas com NA
  linhasNA = dados %>%
    group_by(code) %>%
    summarise(
      dados_faltantes_temperatura_minima = analise.provider.contarNA(minimum_temperature),
      dados_faltantes_temperatura_maxima = analise.provider.contarNA(maximum_temperature),
      dados_faltantes_umidade_relativa_minima_do_ar = analise.provider.contarNA(minimum_relative_air_humidity),
      dados_faltantes_umidade_relativa_maxima_do_ar = analise.provider.contarNA(maximum_relative_air_humidity),
      dados_faltantes_velocidade_do_vento = analise.provider.contarNA(wind_speed),
      dados_faltantes_radiacao_global = analise.provider.contarNA(global_radiation),
      dados_faltantes_precipitacao = analise.provider.contarNA(rain)
    )
  dados = merge(dados,linhasNA,by = "code")
  
  # Contar quantidade de anos
  estacoes = unique(dados$code)
  contarANOS = lapply(estacoes,function(x){
    temp = dados %>%
      filter(code == x) %>%
      mutate(year = format(measurement_date, "%Y")) %>%
      group_by(year) %>%
      summarise(
        quantidade_anos_temperatura_minima = analise.provider.contarANOS(minimum_temperature),
        quantidade_anos_temperatura_maxima = analise.provider.contarANOS(maximum_temperature),
        quantidade_anos_umidade_relativa_minima_do_ar = analise.provider.contarANOS(minimum_relative_air_humidity),
        quantidade_anos_umidade_relativa_maxima_do_ar = analise.provider.contarANOS(maximum_relative_air_humidity),
        quantidade_anos_velocidade_do_vento = analise.provider.contarANOS(wind_speed),
        quantidade_anos_radiacao_global = analise.provider.contarANOS(global_radiation),
        quantidade_anos_precipitacao = analise.provider.contarANOS(rain)
      )
    temp = colSums(temp[,-1])
    temp["code"] = x
    return(temp)
  })
  
  contarANOS = do.call("rbind",contarANOS)
  dados = merge(dados,contarANOS,by = "code")
  
  # Criando coluna comeco e fim
  dados$data_inicio = min(dados$measurement_date)
  dados$data_fim = max(dados$measurement_date)
  
  # Selecionando dados
  dados = dados[, c(
    "code",
    "latitude",
    "longitude",
    "estado",
    "cidade",
    "data_inicio",
    "data_fim",
    "quantidade_anos_temperatura_minima",
    "quantidade_anos_temperatura_maxima",
    "quantidade_anos_umidade_relativa_minima_do_ar",
    "quantidade_anos_umidade_relativa_maxima_do_ar",
    "quantidade_anos_velocidade_do_vento" ,
    "quantidade_anos_radiacao_global" ,
    "quantidade_anos_precipitacao" ,
    "dados_faltantes_temperatura_minima",
    "dados_faltantes_temperatura_maxima" ,
    "dados_faltantes_umidade_relativa_minima_do_ar",
    "dados_faltantes_umidade_relativa_maxima_do_ar",
    "dados_faltantes_velocidade_do_vento",
    "dados_faltantes_radiacao_global",
    "dados_faltantes_precipitacao"
  )]
  
  # Obtendo unicos
  dados = unique(dados)
  
  # Renomeando coluna
  names(dados) = c(
    "Codigo estação",
    "Latitude",
    "Longitude",
    "Estado",
    "Cidade",
    "Data inicio",
    "Data fim",
    "Quantidade de anos temperatura mínima do ar",
    "Quantidade de anos temperatura máxima do ar",
    "Quantidade de anos umidade relativa máxima do ar",
    "Quantidade de anos umidade relativa mínima do ar",
    "Quantidade de anos velocidade do vento",
    "Quantidade de anos radiação global",
    "Quantidade de anos Precipitação Pluvial",
    "Dados faltantes temperatura mínima do ar(dias)",
    "Dados faltantes temperatura máxima do ar(dias)" ,
    "Dados faltantes umidade relativa mínima do ar(dias)",
    "Dados faltantes umidade relativa máxima do ar(dias)",
    "Dados faltantes velocidade do vento(dias)" ,
    "Dados faltantes radiação global(dias)" ,
    "Dados faltantes Precipitação Pluvial(dias)"
  )
  
  # Removendo nomes linhas
  rownames(dados) = NULL
  
  return(dados)
}

#==================================================================
# Metodo para contar a quantidade de dados perdidos por coluna
#
# @dados coluna com dados
# @return numero de NA encontrado nas colunas
#==================================================================
analise.provider.contarNA = function(dados) {
  indexNA = which(is.na(dados))
  return(length(indexNA))
}

#==================================================================
# Metodo para contar a quantidade de anos completos por cada estacao
#
# @dados data.frame a ser preparado
# @return data.frame com colunas criadas
#==================================================================
analise.provider.contarANOS = function(dados) {
  checagem = analise.provider.contarNA(dados)
  if(checagem <= 0){
    return(1)
  }
  return(0) 
}